<?xml version="1.0" encoding="UTF-8"?>
<Module>
<!-- Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *	
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License
-->
	<ModulePrefs title="EonDice">
		<Require feature="rpc"/>
		<Require feature="views"/>
		<Require feature="locked-domain"/>
	</ModulePrefs>
	<Content type="html"><![CDATA[     

<html>
<style type="text/css">
<!--
.button {
  border-radius: 3px;
  -moz-border-radius: 3px;
  background: -webkit-gradient(linear, left top, left bottom, from(#fff), to(#ddd));
  background: -moz-linear-gradient(top, #fff, #ddd);  
  border: 1px solid #bbb;
}
.button:active {
	background: -webkit-gradient(linear, left top, left bottom, from(#aaa), to(#333)); 
	background: -moz-linear-gradient(bottom, #ddd, #aaa); }
#wrap {
    width:800px;
    margin:0 auto;
    background:#EEEEEE;
}   
#main {
    float:left;
    width:300px;
    margin:0 auto;
    background:#FFFFFF;
}
#text {
    float:right;
    width:400px;
    margin-left:20px;
    background:#FFFFFF;
}

-->
</style>

<script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>

<div id="wrap">
    <h2>EonDice v0.2</h2>
    <div id="main">
        <div>
            <label for="name">Visningsnamn:</label>
            <input type="text" id="name" size="15" value=""/>
        </div>
        <div>
            <textarea id="output" rows="5" cols="35" readonly>
            </textarea>
        </div>
        <br/>
        <div>
            <label for="input">n:</label>
            <input type="number" id="input" size="15" value="0"/>
        </div>
        <div class="numRow">
            <input id="K7" type="button" value="7" onclick="numkey(7);"/>
            <input id="K8" type="button" value="8" onclick="numkey(8);"/>
            <input id="K9" type="button" value="9" onclick="numkey(9);"/>
        </div>
        <div class="numRow">
            <input id="K4" type="button" value="4" onclick="numkey(4);"/>
            <input id="K5" type="button" value="5" onclick="numkey(5);"/>
            <input id="K6" type="button" value="6" onclick="numkey(6);"/>
        </div>
        <div class="numRow">
            <input id="K1" type="button" value="1" onclick="numkey(1);"/>
            <input id="K2" type="button" value="2" onclick="numkey(2);"/>
            <input id="K3" type="button" value="3" onclick="numkey(3);"/>
        </div>
        <div class="numRow">
            <input id="KC" type="button" value="C" onclick="key_C();"/>
            <input id="K0" type="button" value="0" onclick="numkey(0);"/>
            <input id="KB" type="button" value="&#x232b;" onclick="key_backspace();"/>
        </div>
        <br/>
        <div>
            <label for="modifier">x:</label>
            <input type="number" id="modifier" size="15" value="0"/>
        </div>
        <div>
            <input id="T10" type="button" value="Slå 1T10+x" onclick="t10_button();"/>
            <input id="T6" type="button" value="Slå nT6+x" onclick="t6_button();"/>
        </div>

        <h3>Enskilda slag:</h3>
        <textarea id="debug" rows="5" cols="30" readonly>
        </textarea>

        <div id="eventsSent"></div><br/>
    </div>
</div>

<script>
// Keep track of how many messages were sent
var messageLastSeen = {};
var myMessageCount = 0;
var missedMessages = 0;

function httpGet(theUrl) {
  var xmlHttp = null;

  xmlHttp = new XMLHttpRequest();
  xmlHttp.open("GET", theUrl, false);
  xmlHttp.send(null);

  return xmlHttp.responseText;
}

function numkey(x) {
  var inp = document.getElementById('input');
  inp.value = inp.value * 10 + x;
}

function key_C() {
  document.getElementById('input').value = 0;
}

function key_backspace() {
  var inp = document.getElementById('input');
  inp.value = Math.floor(inp.value / 10);
}

function t10_button() {
  roll(1, 10);
}

function t6_button() {
  var n = Math.abs(document.getElementById('input').value);

  roll(n, 6);
}

function t10() {
  var dbg = document.getElementById('debug');
  var roll = 0;

  dbg.value = "...";
  roll = httpGet("https://www.random.org/integers/?num=1&min=1&max=10&col=1&base=10&format=plain&rnd=new");
  dbg.value = roll;

  return parseInt(roll);
}

function t6(n) {
  var dbg = document.getElementById('debug');
  var tmpNum = n;
  var sum = 0;
  var tmpDbg = "";

  dbg.value = "...";

  var rolls = httpGet("https://www.random.org/integers/?num=" + n + "&min=1&max=6&col=" + n + "&base=10&format=plain&rnd=new").split("\t");
  var sixes = 0;

  for (var i = 0; i < rolls.length; i++) {
    rolls[i] = parseInt(rolls[i], 10);

    if (rolls[i] == 6) {
      sixes++;
    } else {
      sum += rolls[i];
    }
  }

  dbg.value = rolls;

  while (sixes > 0) {
    tmpDbg = dbg.value;
    n = sixes * 2;
    sixes = 0;

    dbg.value = tmpDbg + "\n...";

    rolls = httpGet("https://www.random.org/integers/?num=" + n + "&min=1&max=6&col=" + n + "&base=10&format=plain&rnd=new").split("\t");

    for (var i = 0; i < rolls.length; i++) {
      rolls[i] = parseInt(rolls[i], 10);

      if (rolls[i] == 6) {
        sixes++;
      } else {
        sum += rolls[i];
      }
    }

    dbg.value = tmpDbg + "\n" + rolls;
  }

  return sum;
}

/** Rolls n Tx, e.g. 5T6 or 1T10. */
function roll(n, tx) {
  var out = document.getElementById('output');
  var name = document.getElementById('name').value;
  var mod = parseInt(document.getElementById('modifier').value);

  if (tx == 10) {
    sum = t10();
  } else {
    sum = t6(n);
  }

  sum += mod;

  out.value = name + " - " + n + "T" + tx + "+" + mod + ": " + sum + "\n" + out.value;

  myMessageCount++;
  gapi.hangout.data.sendMessage(
      JSON.stringify([myMessageCount,
                      name,
                      n,
                      tx,
                      mod,
                      sum]));
}

/** Draw missing packets, if packets are missing. */
function showLossRates() {
  var div = document.getElementById('eventsSent');
  var retVal = 'Missed messages: ' + missedMessages;

  div.innerHTML = retVal;
}

var missedPackets = 0;

/** Count any dropped packages.  Compare incoming message count
 * to the number of messages we've seen; any discrepancy counts
 * as one miss.
 * @param {string} senderid Participant id of sender.
 * @param {number} messageid last number send.
 */
function droppedPackageCount(senderid, messageid) {
  if (messageLastSeen[senderid] != messageid - 1) {
    missedPackets++;
  }
  messageLastSeen[senderid] = messageid;

  console.log('message id = ' + messageid);
}

/** Get a message.
 * @param {MessageReceievedEvent} event An event.
 */
function onMessageReceived(event) {
  try {
    var out = document.getElementById('output');
    var data = JSON.parse(event.message);

    var name = data[1];
    var num = parseInt(data[2]);
    var tx = parseInt(data[3]);
    var mod = parseInt(data[4]);
    var sum = parseInt(data[5]);

    out.value = name + " - " + num + "T" + tx + "+" + mod + ": " + sum + "\n" + out.value;
    droppedPackageCount(event.senderId, parseInt(data[0]));
    showLossRates();
  } catch (e) {
    console.log(e);
  }
}

/** Kick off the app. */
function init() {
  // When API is ready...
  gapi.hangout.onApiReady.add(
      function(eventObj) {
        if (eventObj.isApiReady) {
          try {
            var name = document.getElementById('name');
            gapi.hangout.data.onMessageReceived.add(onMessageReceived);
            name.value = gapi.hangout.getLocalParticipant().person.displayName;
          } catch (e) {
            console.log('init:ERROR');
            console.log(e);
          }
        }
      });
}


// Wait for gadget to load.                                                       
gadgets.util.registerOnLoadHandler(init);
</script>
</body>
]]>
</Content>
</Module>
